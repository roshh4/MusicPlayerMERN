{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roshi\\\\Desktop\\\\college\\\\internship\\\\webdev\\\\project\\\\try\\\\client\\\\src\\\\SongResults.js\",\n  _s = $RefreshSig$();\n// SongResults.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SongResults({\n  results,\n  playSong\n}) {\n  _s();\n  const [showOptions, setShowOptions] = useState(null);\n  const [playlists, setPlaylists] = useState([]);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/api/playlists');\n        if (response.ok) {\n          const data = await response.json();\n          setPlaylists(data.playlists);\n        } else {\n          console.error('Failed to fetch playlists:', response.status);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching playlists:', error);\n      }\n    };\n\n    // Fetch playlists when the component mounts\n    fetchPlaylists();\n  }, []); // Empty dependency array ensures it runs only once on mount\n\n  const handleShowOptions = resultId => {\n    setShowOptions(resultId);\n  };\n  const handleCloseOptions = () => {\n    setShowOptions(null);\n  };\n  const handleOption1 = async resultId => {\n    try {\n      // Find the playlist by ID\n      const playlist = playlists.find(pl => pl._id === showOptions);\n      if (!playlist) {\n        console.error('Playlist not found');\n        return;\n      }\n\n      // Update the tracklist in the playlist\n      playlist.tracks.push(resultId);\n\n      // Update the lastUpdated timestamp\n      playlist.lastUpdated = Date.now();\n\n      // Save the updated playlist\n      const response = await fetch(`http://localhost:3002/api/playlists/${showOptions}/addTrack`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          trackId: resultId\n        })\n      });\n      if (response.ok) {\n        console.log('Track added to playlist successfully');\n      } else {\n        console.error('Failed to add track to playlist:', response.status);\n      }\n      handleCloseOptions();\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n  };\n  const handleOption2 = () => {\n    console.log(\"Option 2\");\n    // Implement your logic for Option 2\n  };\n  const handleOption3 = () => {\n    console.log(\"Option 3\");\n    // Implement your logic for Option 3\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: results.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Song Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: results.map(result => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), \" \", result.name, \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Artist:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 56\n          }, this), \" \", result.artist, \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Album:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 98\n          }, this), ' ', result.album, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleShowOptions(result._id),\n            children: \"More Options\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), showOptions === result._id && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleOption1(result._id),\n              children: \"Option 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleOption2,\n              children: \"Option 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleOption3,\n              children: \"Option 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCloseOptions,\n              children: \"Close Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this)]\n        }, result._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(SongResults, \"r/F78ZFUpQdzW5OqYRixtrp3IIA=\");\n_c = SongResults;\nexport default SongResults;\nvar _c;\n$RefreshReg$(_c, \"SongResults\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SongResults","results","playSong","_s","showOptions","setShowOptions","playlists","setPlaylists","fetchPlaylists","response","fetch","ok","data","json","console","error","status","handleShowOptions","resultId","handleCloseOptions","handleOption1","playlist","find","pl","_id","tracks","push","lastUpdated","Date","now","method","headers","body","JSON","stringify","trackId","log","handleOption2","handleOption3","children","length","fileName","_jsxFileName","lineNumber","columnNumber","map","result","name","artist","album","onClick","_c","$RefreshReg$"],"sources":["C:/Users/roshi/Desktop/college/internship/webdev/project/try/client/src/SongResults.js"],"sourcesContent":["// SongResults.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction SongResults({ results, playSong }) {\r\n  const [showOptions, setShowOptions] = useState(null);\r\n  const [playlists, setPlaylists] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchPlaylists = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3002/api/playlists');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPlaylists(data.playlists);\r\n        } else {\r\n          console.error('Failed to fetch playlists:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching playlists:', error);\r\n      }\r\n    };\r\n\r\n    // Fetch playlists when the component mounts\r\n    fetchPlaylists();\r\n  }, []); // Empty dependency array ensures it runs only once on mount\r\n\r\n  const handleShowOptions = (resultId) => {\r\n    setShowOptions(resultId);\r\n  };\r\n\r\n  const handleCloseOptions = () => {\r\n    setShowOptions(null);\r\n  };\r\n\r\n  const handleOption1 = async (resultId) => {\r\n    try {\r\n      // Find the playlist by ID\r\n      const playlist = playlists.find((pl) => pl._id === showOptions);\r\n\r\n      if (!playlist) {\r\n        console.error('Playlist not found');\r\n        return;\r\n      }\r\n\r\n      // Update the tracklist in the playlist\r\n      playlist.tracks.push(resultId);\r\n\r\n      // Update the lastUpdated timestamp\r\n      playlist.lastUpdated = Date.now();\r\n\r\n      // Save the updated playlist\r\n      const response = await fetch(`http://localhost:3002/api/playlists/${showOptions}/addTrack`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          trackId: resultId,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Track added to playlist successfully');\r\n      } else {\r\n        console.error('Failed to add track to playlist:', response.status);\r\n      }\r\n\r\n      handleCloseOptions();\r\n    } catch (error) {\r\n      console.error('An error occurred:', error);\r\n    }\r\n  };\r\n\r\n  const handleOption2 = () => {\r\n    console.log(\"Option 2\");\r\n    // Implement your logic for Option 2\r\n  };\r\n\r\n  const handleOption3 = () => {\r\n    console.log(\"Option 3\");\r\n    // Implement your logic for Option 3\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {results.length > 0 && (\r\n        <div>\r\n          <h2>Song Results</h2>\r\n          <ul>\r\n            {results.map((result) => (\r\n              <li key={result._id}>\r\n                <strong>Title:</strong> {result.name}, <strong>Artist:</strong> {result.artist}, <strong>Album:</strong>{' '}\r\n                {result.album}\r\n                <button onClick={() => handleShowOptions(result._id)}>More Options</button>\r\n\r\n                {/* Options for the selected song */}\r\n                {showOptions === result._id && (\r\n                  <div>\r\n                    <button onClick={() => handleOption1(result._id)}>Option 1</button>\r\n                    <button onClick={handleOption2}>Option 2</button>\r\n                    <button onClick={handleOption3}>Option 3</button>\r\n                    <button onClick={handleCloseOptions}>Close Options</button>\r\n                  </div>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongResults;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}