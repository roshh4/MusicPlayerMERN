{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roshi\\\\Desktop\\\\college\\\\internship\\\\webdev\\\\project\\\\try\\\\client\\\\src\\\\SongResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './SongResults.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SongResults({\n  results,\n  playSong\n}) {\n  _s();\n  const [selectedSong, setSelectedSong] = useState(null);\n  const [playlists, setPlaylists] = useState([]);\n  const [showPlaylists, setShowPlaylists] = useState(false);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/api/playlists');\n        if (response.ok) {\n          const data = await response.json();\n          setPlaylists(data.playlists);\n        } else {\n          console.error('Failed to fetch playlists:', response.status);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching playlists:', error);\n      }\n    };\n    fetchPlaylists();\n  }, []);\n  const handleOption1 = () => {\n    setShowPlaylists(true);\n  };\n  const handleOption2 = async () => {\n    // ... (existing code)\n  };\n  const handlePlaylistClick = async playlistId => {\n    // ... (existing code)\n  };\n  const closePlaylistsPopup = () => {\n    setShowPlaylists(false);\n  };\n  const handlePlaylistNameClick = playlistId => {\n    // ... (existing code)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showPlaylists && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playlist-popup-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlist-popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close-popup\",\n          onClick: closePlaylistsPopup,\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"All Playlists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handlePlaylistNameClick(playlist._id),\n            children: playlist.name\n          }, playlist._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(SongResults, \"1vW4W7naGGjCqtoJwuUJ9dS2EmA=\");\n_c = SongResults;\nexport default SongResults;\nvar _c;\n$RefreshReg$(_c, \"SongResults\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","SongResults","results","playSong","_s","selectedSong","setSelectedSong","playlists","setPlaylists","showPlaylists","setShowPlaylists","fetchPlaylists","response","fetch","ok","data","json","console","error","status","handleOption1","handleOption2","handlePlaylistClick","playlistId","closePlaylistsPopup","handlePlaylistNameClick","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","playlist","_id","name","_c","$RefreshReg$"],"sources":["C:/Users/roshi/Desktop/college/internship/webdev/project/try/client/src/SongResults.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './SongResults.css';\r\n\r\nfunction SongResults({ results, playSong }) {\r\n  const [selectedSong, setSelectedSong] = useState(null);\r\n  const [playlists, setPlaylists] = useState([]);\r\n  const [showPlaylists, setShowPlaylists] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchPlaylists = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3002/api/playlists');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPlaylists(data.playlists);\r\n        } else {\r\n          console.error('Failed to fetch playlists:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching playlists:', error);\r\n      }\r\n    };\r\n\r\n    fetchPlaylists();\r\n  }, []);\r\n\r\n  const handleOption1 = () => {\r\n    setShowPlaylists(true);\r\n  };\r\n\r\n  const handleOption2 = async () => {\r\n    // ... (existing code)\r\n  };\r\n\r\n  const handlePlaylistClick = async (playlistId) => {\r\n    // ... (existing code)\r\n  };\r\n\r\n  const closePlaylistsPopup = () => {\r\n    setShowPlaylists(false);\r\n  };\r\n\r\n  const handlePlaylistNameClick = (playlistId) => {\r\n    // ... (existing code)\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* ... (existing code) */}\r\n      {showPlaylists && (\r\n        <div className=\"playlist-popup-overlay\">\r\n          <div className=\"playlist-popup-content\">\r\n            <span className=\"close-popup\" onClick={closePlaylistsPopup}>close</span>\r\n            <h3>All Playlists</h3>\r\n            <ul>\r\n              {playlists.map((playlist) => (\r\n                <li key={playlist._id} onClick={() => handlePlaylistNameClick(playlist._id)}>\r\n                  {playlist.name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongResults;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}