{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roshi\\\\Desktop\\\\college\\\\internship\\\\webdev\\\\project\\\\try\\\\client\\\\src\\\\Favorites.js\",\n  _s = $RefreshSig$();\n// Favorites.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport OptionsPopup from './OptionsPopup';\nimport './Favorites.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Favorites({\n  setSelectedSong\n}) {\n  _s();\n  const [likedSongs, setLikedSongs] = useState([]);\n  const [selectedSongOption, setSelectedSongOption] = useState(null);\n  const [showOptions, setShowOptions] = useState(false);\n  const [playlists, setPlaylists] = useState([]);\n  useEffect(() => {\n    const fetchLikedSongs = async () => {\n      try {\n        const response = await axios.get('http://localhost:3002/api/likedSongs');\n        if (response.status === 200) {\n          setLikedSongs(response.data.likedSongs);\n        } else {\n          console.error('Failed to fetch liked songs:', response.status);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching liked songs:', error);\n      }\n    };\n\n    // Fetch liked songs when the component mounts\n    fetchLikedSongs();\n  }, []);\n  useEffect(() => {\n    const fetchPlaylists = async () => {\n      try {\n        const response = await fetch('http://localhost:3002/api/playlists');\n        if (response.ok) {\n          const data = await response.json();\n          setPlaylists(data.playlists);\n        } else {\n          console.error('Failed to fetch playlists:', response.status);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching playlists:', error);\n      }\n    };\n\n    // Fetch playlists when the component mounts\n    fetchPlaylists();\n  }, []);\n  const handlePlaySong = song => {\n    setSelectedSong(song.songId); // Assuming song.songId is the correct ID\n  };\n  const handleShowOptions = song => {\n    setSelectedSongOption(song);\n    setShowOptions(true);\n  };\n  const handleCloseOptions = () => {\n    setSelectedSongOption(null);\n    setShowOptions(false);\n  };\n  const handleOption1 = playlist => {\n    // Log both the playlist's ID and the selected song's ID\n    console.log('Playlist ID:', playlist._id);\n    console.log('Selected Song ID:', selectedSongOption.songId);\n\n    // Implement your logic for Option 1\n    setShowOptions(false);\n    console.log(\"Option 1 - Display playlists\");\n  };\n  const handleOption2 = async () => {\n    try {\n      // Send a request to add the song to the LikedSongs collection\n      const response = await axios.post('http://localhost:3002/api/likedSongs/addSong', {\n        songId: selectedSongOption.songId\n      });\n      if (response.status === 200) {\n        console.log('Song added to LikedSongs');\n      } else {\n        console.error('Failed to add song to LikedSongs:', response.status);\n      }\n\n      // Close the options popup\n      handleCloseOptions();\n    } catch (error) {\n      console.error('An error occurred while adding song to LikedSongs:', error);\n    }\n  };\n  const handleOption3 = () => {\n    console.log(\"Option 3\");\n    // Implement your logic for Option 3\n    handleCloseOptions();\n  };\n  const handlePlaylistClick = async playlistId => {\n    try {\n      const response = await fetch(`http://localhost:3002/api/playlists/${playlistId}/addSong`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          songId: selectedSongOption.songId\n        })\n      });\n      if (response.ok) {\n        console.log(`Song added to playlist ${playlistId}`);\n      } else {\n        console.error('Failed to add song to playlist:', response.status);\n      }\n    } catch (error) {\n      console.error('An error occurred while adding song to playlist:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Favorites\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), likedSongs.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: likedSongs.map(likedSong => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), \" \", likedSong.songId.name, \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Artist:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 64\n        }, this), \" \", likedSong.songId.artist, \",\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Album:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this), \" \", likedSong.songId.album, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handlePlaySong(likedSong),\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleShowOptions(likedSong),\n          children: \"More Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this)]\n      }, likedSong._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No liked songs yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), selectedSongOption && /*#__PURE__*/_jsxDEV(OptionsPopup, {\n      playlists: playlists,\n      showPlaylists: showOptions // Use showOptions instead of hardcoding\n      ,\n      handleOption1: handleOption1,\n      handleOption2: handleOption2,\n      handleOption3: handleOption3,\n      handleCloseOptions: handleCloseOptions,\n      handlePlaylistClick: handlePlaylistClick,\n      selectedSong: selectedSongOption\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Favorites, \"POs8RvwhV5i2syXO5sFg4m3rMlI=\");\n_c = Favorites;\nexport default Favorites;\nvar _c;\n$RefreshReg$(_c, \"Favorites\");","map":{"version":3,"names":["React","useState","useEffect","axios","OptionsPopup","jsxDEV","_jsxDEV","Favorites","setSelectedSong","_s","likedSongs","setLikedSongs","selectedSongOption","setSelectedSongOption","showOptions","setShowOptions","playlists","setPlaylists","fetchLikedSongs","response","get","status","data","console","error","fetchPlaylists","fetch","ok","json","handlePlaySong","song","songId","handleShowOptions","handleCloseOptions","handleOption1","playlist","log","_id","handleOption2","post","handleOption3","handlePlaylistClick","playlistId","method","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","likedSong","name","artist","album","onClick","showPlaylists","selectedSong","_c","$RefreshReg$"],"sources":["C:/Users/roshi/Desktop/college/internship/webdev/project/try/client/src/Favorites.js"],"sourcesContent":["// Favorites.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport OptionsPopup from './OptionsPopup';\r\nimport './Favorites.css';\r\n\r\nfunction Favorites({ setSelectedSong }) {\r\n  const [likedSongs, setLikedSongs] = useState([]);\r\n  const [selectedSongOption, setSelectedSongOption] = useState(null);\r\n  const [showOptions, setShowOptions] = useState(false);\r\n  const [playlists, setPlaylists] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchLikedSongs = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3002/api/likedSongs');\r\n        if (response.status === 200) {\r\n          setLikedSongs(response.data.likedSongs);\r\n        } else {\r\n          console.error('Failed to fetch liked songs:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching liked songs:', error);\r\n      }\r\n    };\r\n\r\n    // Fetch liked songs when the component mounts\r\n    fetchLikedSongs();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchPlaylists = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:3002/api/playlists');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setPlaylists(data.playlists);\r\n        } else {\r\n          console.error('Failed to fetch playlists:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching playlists:', error);\r\n      }\r\n    };\r\n\r\n    // Fetch playlists when the component mounts\r\n    fetchPlaylists();\r\n  }, []);\r\n\r\n  const handlePlaySong = (song) => {\r\n    setSelectedSong(song.songId); // Assuming song.songId is the correct ID\r\n  };\r\n\r\n  const handleShowOptions = (song) => {\r\n    setSelectedSongOption(song);\r\n    setShowOptions(true);\r\n  };\r\n\r\n  const handleCloseOptions = () => {\r\n    setSelectedSongOption(null);\r\n    setShowOptions(false);\r\n  };\r\n\r\n  const handleOption1 = (playlist) => {\r\n    // Log both the playlist's ID and the selected song's ID\r\n    console.log('Playlist ID:', playlist._id);\r\n    console.log('Selected Song ID:', selectedSongOption.songId);\r\n  \r\n    // Implement your logic for Option 1\r\n    setShowOptions(false);\r\n    console.log(\"Option 1 - Display playlists\");\r\n  };\r\n\r\n  const handleOption2 = async () => {\r\n    try {\r\n      // Send a request to add the song to the LikedSongs collection\r\n      const response = await axios.post('http://localhost:3002/api/likedSongs/addSong', {\r\n        songId: selectedSongOption.songId,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        console.log('Song added to LikedSongs');\r\n      } else {\r\n        console.error('Failed to add song to LikedSongs:', response.status);\r\n      }\r\n\r\n      // Close the options popup\r\n      handleCloseOptions();\r\n    } catch (error) {\r\n      console.error('An error occurred while adding song to LikedSongs:', error);\r\n    }\r\n  };\r\n\r\n  const handleOption3 = () => {\r\n    console.log(\"Option 3\");\r\n    // Implement your logic for Option 3\r\n    handleCloseOptions();\r\n  };\r\n\r\n  const handlePlaylistClick = async (playlistId) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:3002/api/playlists/${playlistId}/addSong`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ songId: selectedSongOption.songId }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        console.log(`Song added to playlist ${playlistId}`);\r\n      } else {\r\n        console.error('Failed to add song to playlist:', response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error('An error occurred while adding song to playlist:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Favorites</h2>\r\n      {likedSongs.length > 0 ? (\r\n        <ul>\r\n          {likedSongs.map((likedSong) => (\r\n            <li key={likedSong._id}>\r\n              {/* Display song details */}\r\n              <strong>Title:</strong> {likedSong.songId.name}, <strong>Artist:</strong> {likedSong.songId.artist},{' '}\r\n              <strong>Album:</strong> {likedSong.songId.album}\r\n              <button onClick={() => handlePlaySong(likedSong)}>Play</button>\r\n              <button onClick={() => handleShowOptions(likedSong)}>More Details</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No liked songs yet.</p>\r\n      )}\r\n\r\n      {/* Options popup for the selected song */}\r\n      {selectedSongOption && (\r\n        <OptionsPopup\r\n          playlists={playlists}\r\n          showPlaylists={showOptions}  // Use showOptions instead of hardcoding\r\n          handleOption1={handleOption1}\r\n          handleOption2={handleOption2}\r\n          handleOption3={handleOption3}\r\n          handleCloseOptions={handleCloseOptions}\r\n          handlePlaylistClick={handlePlaylistClick} \r\n          selectedSong={selectedSongOption} \r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,SAASA,CAAC;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EACtC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMgB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,sCAAsC,CAAC;QACxE,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UAC3BV,aAAa,CAACQ,QAAQ,CAACG,IAAI,CAACZ,UAAU,CAAC;QACzC,CAAC,MAAM;UACLa,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEL,QAAQ,CAACE,MAAM,CAAC;QAChE;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE;IACF,CAAC;;IAED;IACAN,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACd,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMN,QAAQ,GAAG,MAAMO,KAAK,CAAC,qCAAqC,CAAC;QACnE,IAAIP,QAAQ,CAACQ,EAAE,EAAE;UACf,MAAML,IAAI,GAAG,MAAMH,QAAQ,CAACS,IAAI,CAAC,CAAC;UAClCX,YAAY,CAACK,IAAI,CAACN,SAAS,CAAC;QAC9B,CAAC,MAAM;UACLO,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEL,QAAQ,CAACE,MAAM,CAAC;QAC9D;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACrE;IACF,CAAC;;IAED;IACAC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,cAAc,GAAIC,IAAI,IAAK;IAC/BtB,eAAe,CAACsB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,iBAAiB,GAAIF,IAAI,IAAK;IAClCjB,qBAAqB,CAACiB,IAAI,CAAC;IAC3Bf,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMkB,kBAAkB,GAAGA,CAAA,KAAM;IAC/BpB,qBAAqB,CAAC,IAAI,CAAC;IAC3BE,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,MAAMmB,aAAa,GAAIC,QAAQ,IAAK;IAClC;IACAZ,OAAO,CAACa,GAAG,CAAC,cAAc,EAAED,QAAQ,CAACE,GAAG,CAAC;IACzCd,OAAO,CAACa,GAAG,CAAC,mBAAmB,EAAExB,kBAAkB,CAACmB,MAAM,CAAC;;IAE3D;IACAhB,cAAc,CAAC,KAAK,CAAC;IACrBQ,OAAO,CAACa,GAAG,CAAC,8BAA8B,CAAC;EAC7C,CAAC;EAED,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF;MACA,MAAMnB,QAAQ,GAAG,MAAMhB,KAAK,CAACoC,IAAI,CAAC,8CAA8C,EAAE;QAChFR,MAAM,EAAEnB,kBAAkB,CAACmB;MAC7B,CAAC,CAAC;MAEF,IAAIZ,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3BE,OAAO,CAACa,GAAG,CAAC,0BAA0B,CAAC;MACzC,CAAC,MAAM;QACLb,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEL,QAAQ,CAACE,MAAM,CAAC;MACrE;;MAEA;MACAY,kBAAkB,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oDAAoD,EAAEA,KAAK,CAAC;IAC5E;EACF,CAAC;EAED,MAAMgB,aAAa,GAAGA,CAAA,KAAM;IAC1BjB,OAAO,CAACa,GAAG,CAAC,UAAU,CAAC;IACvB;IACAH,kBAAkB,CAAC,CAAC;EACtB,CAAC;EAED,MAAMQ,mBAAmB,GAAG,MAAOC,UAAU,IAAK;IAChD,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMO,KAAK,CAAE,uCAAsCgB,UAAW,UAAS,EAAE;QACxFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEhB,MAAM,EAAEnB,kBAAkB,CAACmB;QAAO,CAAC;MAC5D,CAAC,CAAC;MAEF,IAAIZ,QAAQ,CAACQ,EAAE,EAAE;QACfJ,OAAO,CAACa,GAAG,CAAE,0BAAyBM,UAAW,EAAC,CAAC;MACrD,CAAC,MAAM;QACLnB,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEL,QAAQ,CAACE,MAAM,CAAC;MACnE;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;IAC1E;EACF,CAAC;EAED,oBACElB,OAAA;IAAA0C,QAAA,gBACE1C,OAAA;MAAA0C,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjB1C,UAAU,CAAC2C,MAAM,GAAG,CAAC,gBACpB/C,OAAA;MAAA0C,QAAA,EACGtC,UAAU,CAAC4C,GAAG,CAAEC,SAAS,iBACxBjD,OAAA;QAAA0C,QAAA,gBAEE1C,OAAA;UAAA0C,QAAA,EAAQ;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACG,SAAS,CAACxB,MAAM,CAACyB,IAAI,EAAC,IAAE,eAAAlD,OAAA;UAAA0C,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACG,SAAS,CAACxB,MAAM,CAAC0B,MAAM,EAAC,GAAC,EAAC,GAAG,eACxGnD,OAAA;UAAA0C,QAAA,EAAQ;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAACG,SAAS,CAACxB,MAAM,CAAC2B,KAAK,eAC/CpD,OAAA;UAAQqD,OAAO,EAAEA,CAAA,KAAM9B,cAAc,CAAC0B,SAAS,CAAE;UAAAP,QAAA,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC/D9C,OAAA;UAAQqD,OAAO,EAAEA,CAAA,KAAM3B,iBAAiB,CAACuB,SAAS,CAAE;UAAAP,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GALnEG,SAAS,CAAClB,GAAG;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMlB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAEL9C,OAAA;MAAA0C,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC1B,EAGAxC,kBAAkB,iBACjBN,OAAA,CAACF,YAAY;MACXY,SAAS,EAAEA,SAAU;MACrB4C,aAAa,EAAE9C,WAAY,CAAE;MAAA;MAC7BoB,aAAa,EAAEA,aAAc;MAC7BI,aAAa,EAAEA,aAAc;MAC7BE,aAAa,EAAEA,aAAc;MAC7BP,kBAAkB,EAAEA,kBAAmB;MACvCQ,mBAAmB,EAAEA,mBAAoB;MACzCoB,YAAY,EAAEjD;IAAmB;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3C,EAAA,CAnJQF,SAAS;AAAAuD,EAAA,GAATvD,SAAS;AAqJlB,eAAeA,SAAS;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}